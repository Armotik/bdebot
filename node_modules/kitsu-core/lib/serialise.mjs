import{error as t}from"./error.mjs";function r(t,r,e,i,n){return i.relationships||(i.relationships={}),t.type||(t.type=r),i.relationships[e]={data:Object.assign(t)},i}function e(t,r,e,i,n){return i.relationships||(i.relationships={}),i.relationships[e]={data:t.map(({id:t,type:e})=>({id:t,type:e||r}))},i}function i(t,r,e){return e.attributes||(e.attributes={}),e.attributes[r]=t,e}function n(t){return Object.prototype.hasOwnProperty.call(t,"id")}function a(a,o={},s="POST"){try{if(null===o||Array.isArray(o)&&0===o.length)return{data:o};const t=this.plural?this.plural(this.camel(a)):this.camel(a);let c={type:t};!function(t,r,e){if(t.constructor!==Object||0===Object.keys(t).length)throw new Error("".concat(r," requires a JSON object body"));if("POST"!==r&&!t.id)throw new Error("".concat(r," requires an ID for the ").concat(e," type"))}(o,s,t),o.id&&(c.id=String(o.id));for(const t in o){const a=o[t],s=this.plural?this.plural(this.camel(t)):this.camel(t);null!==a&&a.constructor===Object&&n(a)?c=r(a,s,t,c):null!==a&&Array.isArray(a)&&a.length>0&&n(a[0])?c=e(a,s,t,c):"id"!==t&&"type"!==t&&(c=i(a,t,c))}return{data:c}}catch(r){throw t(r)}}export{a as serialise};
